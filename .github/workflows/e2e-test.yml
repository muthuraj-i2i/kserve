name: E2E Tests

on:
  pull_request:
  push:
    branches: [main]

jobs:
  # -------------------
  # Stage 1: Build Jobs
  # -------------------
  kserve-image-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build KServe controller/agent/router images
        run: |
          docker build -t kserve/controller:${{ github.sha }} -f build/controller/Dockerfile .
          docker build -t kserve/agent:${{ github.sha }} -f build/agent/Dockerfile .
          docker build -t kserve/router:${{ github.sha }} -f build/router/Dockerfile .
          mkdir -p images
          docker save kserve/controller:${{ github.sha }} > images/controller.tar
          docker save kserve/agent:${{ github.sha }} > images/agent.tar
          docker save kserve/router:${{ github.sha }} > images/router.tar

      - uses: actions/upload-artifact@v4
        with:
          name: kserve-images
          path: images/

  predictor-runtime-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build predictor runtime image
        run: |
          docker build -t kserve/predictor:${{ github.sha }} -f build/predictor/Dockerfile .
          mkdir -p images
          docker save kserve/predictor:${{ github.sha }} > images/predictor.tar

      - uses: actions/upload-artifact@v4
        with:
          name: predictor-images
          path: images/

  explainer-runtime-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build explainer runtime image
        run: |
          docker build -t kserve/explainer:${{ github.sha }} -f build/explainer/Dockerfile .
          mkdir -p images
          docker save kserve/explainer:${{ github.sha }} > images/explainer.tar

      - uses: actions/upload-artifact@v4
        with:
          name: explainer-images
          path: images/

  graph-tests-images-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build graph test images
        run: |
          docker build -t kserve/graph:${{ github.sha }} -f test/e2e/graph/Dockerfile .
          mkdir -p images
          docker save kserve/graph:${{ github.sha }} > images/graph.tar

      - uses: actions/upload-artifact@v4
        with:
          name: graph-images
          path: images/

  # -------------------
  # Stage 2: Test Jobs
  # -------------------
  e2e-tests:
    runs-on: ubuntu-latest
    needs: 
      - kserve-image-build
      - predictor-runtime-build
      - explainer-runtime-build
      - graph-tests-images-build
    strategy:
      fail-fast: false
      matrix:
        test: [predictor, transformer-explainer-mms, graph, path-routing, qpext, helm, raw, kourier, llm, hf-vllm, modelcache]

    steps:
      - uses: actions/checkout@v4

      - name: Download all built images
        uses: actions/download-artifact@v4
        with:
          path: images

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
        with:
          kubernetes-version: v1.28.3
          driver: docker
          addons: ingress,registry
          start-args: "--memory=4096 --cpus=4"

      - name: Load images into Minikube
        run: |
          for img in images/**/*.tar; do
            echo "Loading $img ..."
            minikube image load $img || true
          done

      - name: Install KServe
        run: ./test/scripts/install_kserve.sh

      - name: Run tests
        run: |
          case "${{ matrix.test }}" in
            predictor)
              pytest -s -v test/e2e/predictor ;;
            transformer-explainer-mms)
              pytest -s -v test/e2e/transformer_explainer_mms ;;
            graph)
              pytest -s -v test/e2e/graph ;;
            path-routing)
              pytest -s -v test/e2e/path_based_routing ;;
            qpext)
              pytest -s -v test/e2e/qpext ;;
            helm)
              pytest -s -v test/e2e/helm ;;
            raw)
              pytest -s -v test/e2e/raw ;;
            kourier)
              pytest -s -v test/e2e/kourier ;;
            llm)
              pytest -s -v test/e2e/llm ;;
            hf-vllm)
              pytest -s -v test/e2e/hf_vllm ;;
            modelcache)
              pytest -s -v test/e2e/modelcache ;;
          esac
