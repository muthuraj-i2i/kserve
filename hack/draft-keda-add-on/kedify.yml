apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: otel-example
spec:
  scaleTargetRef:
    name: sklearn-v2-iris-predictor
  triggers:
    - type: external
      metadata:
        scalerAddress: "keda-otel-scaler.default.svc.cluster.local:4318"
#        scalerAddress: "host.k3d.internal:4318"

        # required - no default
        # PromQL-like query identifying exactly one metric name
        # if metric has more dimensions, these can be further specified by labels {a=b,c=2..}
        # when multiple time series (/dimensions) fulfil the label selector, then we first apply the operationOverTime
        # on each time serie and combine the result with the optional operation that's part of this query (if omitted, it's sum)
        #
        # grammar:
        # op(metricName{label1=val1, label2=val2})  , where 'op' is one of {sum, min, max, avg}
        #
        # examples:
        #  - avg(http_requests_total{code=200,handler=targets,instance=example:8080,method=get})   (good with operationOverTime=rate)
        #  - up{instance=prod:8080}
        #  - foobar
        #
        # caveats:
        #  - label selector do not support advanced operators like != or =~ (only simple = denoting exact match is supported atm.)
        #  - it's not supported to combine different metric names here
        #  - no arithmetic
        metricQuery: rate(dapr_http_server_request_count[1m])

        targetValue: "100"

        # optional - default no limit
        # lower integer bound for the value calculated by the scaler (~min replicas)
        clampMin: "0"

        # optional - default no limit
        # upper integer bound for the value calculated by the scaler (~max replicas)
        clampMax: "10"

        # optional - default 'last_one', available values:
        #    example metric   t1   t2   t3   t4   t5   t6   t7        result
        #   - last_one  ...   3    2    1    6    3    2    3    ->   3
        #   - min       ...   3    2    1    6    3    2    3    ->   1
        #   - max       ...   3    2    1    6    3    2    3    ->   6
        #   - avg       ...   3    2    1    6    3    2    3    ->   round(20/7)=7
        #   - rate      ...   1    2    3    4    5    6    7    ->   1 (provided, measurements were taken each second)
        #   - count     ...   3    2    1    6    3    2    3    ->   7
        operationOverTime: "rate"
  # for faster reaction - debug
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 10
        scaleUp:
          stabilizationWindowSeconds: 10